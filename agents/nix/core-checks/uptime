#!/bin/ksh
# vim: noai:ts=4:sw=4:expandtab

# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Load our common functions
. "${MK_LIBDIR}/common_functions.sh"

# Import jsonprint, which assists us with our json formatting
. "${MK_LIBDIR}/jsonprint.sh"

json_open
  json_obj_open uptime

    case "${MK_OSSTR}" in
        (aix)
            # uptime formats
            # 12:55pm  up 105 days, 21 hrs,  2 users, load average: 0.26, 0.26, 0.26 --> 9147600
            # 1:41pm   up 105 days, 21:46,   2 users, load average: 0.28, 0.28, 0.27 --> 9150360
            # 05:26PM  up           1:16,    1 user,  load average: 0.33, 0.21, 0.20 --> 4560
            # 06:13PM  up           2:03,    1 user,  load average: 1.16, 1.07, 0.91 --> 7380
            # 08:43AM  up 29 mins,           1 user,  load average: 0.09, 0.18, 0.21 --> 1740
            # 08:47AM  up 66 days,  18:34,   1 user,  load average: 2.25, 2.43, 2.61 --> 5769240
            # 08:45AM  up 76 days,  34 mins, 1 user,  load average: 2.25, 2.43, 2.61 --> 5769240
            
            _uptime=$(uptime | sed -e 's/^.*up//g' -e 's/[0-9]* user.*//g')
            case ${_uptime} in
                ( *day* ) _up_days=$(mkecho "${_uptime}" | sed -e 's/days\{0,1\},.*//g') ;;
                ( * ) _up_days="0" ;;
            esac

            case ${_uptime} in
                ( *:* )
                    _up_hours=$(mkecho "${_uptime}" | sed -e 's/.*days\{0,1\},//g' -e 's/:.*//g')
                    _up_mins=$(mkecho "${_uptime}" | sed -e 's/.*days\{0,1\},//g' -e 's/.*://g' -e 's/,.*//g')
                ;;
                ( *hr* )
                    _up_hours=$(mkecho "${_uptime}" | sed -e 's/hrs\{0,1\},.*//g' -e 's/.*,//g')
                    _up_mins=0
                ;;
                ( *min* )
                    _up_hours=0
                    _up_mins=$(mkecho "${_uptime}" | sed -e 's/mins\{0,1\},.*//g' -e 's/.*hrs\{0,1\},//g' -e 's/.*days\{0,1\},//g')
                ;;
                ( * )
                    _up_hours="0"
                    _up_mins=0
                ;;
            esac

            _system_uptime=$(((_up_days*86400)+(_up_hours*3600)+(_up_mins*60)))
            json_num uptime "${_system_uptime}"
        ;;
        (freebsd)
            # Calculate the uptime in seconds since epoch compatible to /proc/uptime in linux
            _up_seconds=$(( $(get_epoch) - $(sysctl -n kern.boottime | cut -f1 -d\, | awk '{print $4}') ))
            # pgrep is not appropriate (or even available?) here
            # shellcheck disable=SC2009
            _idle_seconds=$(ps axw | grep "[i]dle" | awk '/idle/{print $4}' | cut -f1 -d':' )

            json_num uptime "${_up_seconds}"
            json_num_append idle "${_idle_seconds}"
        ;;
        (linux)
            if [ -z "${MK_IS_DOCKERIZED}" ]; then
                read -r _up_seconds _idle_seconds < /proc/uptime
                json_num uptime "${_up_seconds}"
                json_num_append idle "${_idle_seconds}"
            else
                echo here
                _up_seconds="$(( $(get_epoch) - $(stat -c %Z /dev/pts) ))"
                json_num uptime "${_up_seconds}"
            fi
        ;;
        (mac|netbsd|openbsd)
            _boot_time=$(sysctl -n kern.boottime | awk -F '[ |, ]' '{print $4}')
            _system_uptime=$(( $(get_epoch) - _boot_time ))
            json_num uptime "${_system_uptime}"
        ;;
        (solaris)
            # Solaris doesn't always give a consistent output on uptime, thus include side information
            # Tested in VM for solaris 10/11
            _ctime=$(nawk 'BEGIN{print srand()}')
            _btime=$(kstat '-p' 'unix:::boot_time' 2>&1 | awk '/boot_time/{print $2}')
            mkecho $((_ctime - _btime));
            mkecho '[uptime_solaris_start]'
            uname -a
            zonename
            uptime
            kstat -p unix:0:system_misc:snaptime
            mkecho '[uptime_solaris_end]'
            unset -v _ctime _btime
        ;;
    esac

    # 'who -b' is a mostly portable way to report the boot time
    if who -b > /dev/null 2>&1; then
        _who_b=$(who -b)
        # Remove any leading whitespace from '_who_b
        _who_b="${_who_b#"${_who_b%%[![:space:]]*}"}"
        json_str_append who_b "${_who_b}"
    fi

  json_obj_close
json_close
