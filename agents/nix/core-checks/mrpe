#!/bin/ksh
# vim: noai:ts=4:sw=4:expandtab

# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

run_mrpe() {
    _mrpe_descr="${1}"
    shift
    _mrpe_cmdline="${*}"

    mkecho '<<<mrpe>>>'

    _mrpe_plugin=${_mrpe_cmdline%% *}
    _mrpe_output=$(eval "${_mrpe_cmdline}")

    # We ignore the shellcheck alerts for 'mkecho -n' as our 'mkecho()' solves this
    # shellcheck disable=SC2039
    mkecho -n "(${_mrpe_plugin##*/}) ${_mrpe_descr} ${?} ${_mrpe_output}" | tr \\n \\1
    mkecho

    # Unset the function variables
    unset -v _mrpe_descr _mrpe_cmdline _mrpe_plugin _mrpe_output
}

# MK's Remote Plugin Executor
# We handle mrpe.cfg format that looks like this for synchronous running:
# SERVICE_NAME  /path/to/the/plugin/script  -warn 10 -crit 20
# Or this for asynchronous running:
# SERVICE_NAME  (interval=360:appendage=1)  /path/to/the/plugin/script  -warn 10 -crit 20
if [ -r "${MK_CONFDIR}/mrpe.cfg" ]; then
    grep -Ev '^[[:space:]]*($|#)' "${MK_CONFDIR}/mrpe.cfg" |
        while read -r _mrpe_descr _mrpe_cmdline; do
            # Detect if _mrpe_cmdline starts with '(' i.e. async mode
            case "${_mrpe_cmdline}" in
                (\(*)
                    # If we do start with '(', then split 'params' out of '_mrpe_cmdline'
                    # We strip the brackets from 'params' and rewrite '_mrpe_cmdline' without the params
                    _mrpe_params=$(mkecho "${_mrpe_cmdline% *}" | tr -d '()')
                    _mrpe_cmdline="${_mrpe_cmdline##* }"

                    # split multiple parameter assignments
                    for _par in $(mkecho "${_mrpe_params}" | tr ":" "\\n"); do 
                        # split each assignment
                        _key="${_par%=*}"
                        _value="${_par#*=}"
                        # Setting 'args' here upsets shellcheck because we're within a while pipeline
                        # This should be fine: if we use it, it's immediately so
                        # shellcheck disable=SC2030
                        case "${_key}" in
                            (interval)  _interval="${_value}" ;;
                            (appendage) _args="-ma" ;;
                        esac
                    done
                    run_cached_cmd "${_args:--m}" "${_mrpe_descr}" "${_interval:-}" "${_mrpe_cmdline}"
                ;;
                (*)
                    run_mrpe "${_mrpe_descr}" "${_mrpe_cmdline}"
                ;;
            esac 
        done
        unset -v _mrpe_descr _mrpe_cmdline _mrpe_params _par _key _value _interval _args
fi