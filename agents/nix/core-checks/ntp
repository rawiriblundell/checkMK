#!/bin/ksh
# vim: noai:ts=4:sw=4:expandtab

# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Helper function for 'section_ntp()'
get_ntpq() {
    # If 'ntpq' isn't in PATH, there's no point going further
    inpath ntpq || return 1
    [ "${1}" = "--header" ] && mkecho '<<<ntp>>>'
    ntpq -np | sed -e 1,2d -e 's/^\\(.\\)/\\1 /' -e 's/^ /%/' || true
}

# Function to pull timesync information from chrony
section_chrony() {
    # The "| cat" has been added for some kind of regression in RedHat 7.5. The
    # SELinux rules shipped with that release were denying the chronyc call without cat.
    if inpath chronyc; then
        # Identify if the daemon is active...
        if [ "$(systemctl | awk '/chronyd.service/{print $3; exit}')" = "active" ]; then
            run_cached_cmd chrony 30 "waitmax 5 chronyc -n tracking | cat || true"
        fi
    fi
}

# Requires 'get_ntpq()'
section_ntp() {
    # If '${timesync_rc}' is 0, then 'section_timesyncd()' has returned successfully in
    # which case we do not want to proceed with 'ntpq', so return and skip further processing
    [ "${timesync_rc}" -eq 0 ] && return 0

    # If 'ntpq' isn't in PATH, there's no point going further
    inpath ntpq || return 1

    # First we try to identify if we're beholden to systemd
    if inpath systemctl; then
        # shellcheck disable=SC2016
        if [ "$(systemctl | awk '/ntp.service|ntpd.service/{print $3; exit}')" = "active" ]; then
            # remove heading, make first column space separated
            run_cached_cmd -s ntp 30 "waitmax 5 get_ntpq"
        fi
        # Return to leave the function with no further processing
        return
    fi

    # If we get to this point, we attempt to test classic ntp daemons
    case "${MK_OSSTR}" in
        (aix)
            [ "$(lssrc -s xntpd|grep -c active)" -gt 0 ] && get_ntpq --header
        ;;
        (solaris)
            # 'pgrep' does not work well in this case
            ps -o comm "${pszone}" | grepq -w ".*ntpd" && get_ntpq --header
        ;;
        (linux|*)
            # Try to determine status via /etc/init.d
            # This might also be appropriate for AIX, Solaris and others
            for _ntp_daemon in ntp ntpd openntpd; do
                # Check for a service script
                if [ -x /etc/init.d/"${_ntp_daemon}" ]; then
                    # If the status returns 0, we assume we have a running service
                    if /etc/init.d/"${_ntp_daemon}" status >/dev/null 2>&1; then
                        run_cached_cmd -s ntp 30 "waitmax 5 get_ntpq"
                    fi
                fi
            done
            unset -v _ntp_daemon
        ;;
    esac
}

# Function to pull timesync information via timedatectl (if possible)
section_timesyncd() {
    inpath timedatectl || return 1
    timedatectl timesync-status >/dev/null 2>&1 || return 1
    mkecho "<<<timesyncd>>>"
    timedatectl timesync-status
    get_file_info --mtime /var/lib/systemd/timesync/clock | awk '{print "[[["$1"]]]"}'
    return 0
}

section_timesyncd
# Grab the exit code from 'section_timesyncd()' as this determines 'section_ntp()'s behaviour
# Our goal here is to avoid multiple outputs e.g. timedatectl + ntpq
timesync_rc="${?}"
section_ntp
unset -v timesync_rc
section_chrony