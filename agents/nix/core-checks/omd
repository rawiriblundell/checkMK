# shellcheck shell=ksh
# vim: noai:ts=4:sw=4:expandtab

# Copyright (C) 2019 tribe29 GmbH - License: GNU General Public License v2
# This file is part of Checkmk (https://checkmk.com). It is subject to the terms and
# conditions defined in the file COPYING, which is part of this source code package.

# Check status of OMD sites and Check_MK Notification spooler
if inpath omd; then
    mkecho '<<<labels:sep(0)>>>'
    # mkecho '{"cmk/check_mk_server": "yes"}'
    mkecho -j "cmk/check_mk_server" "yes"

    run_cached_cmd omd_status 60 "omd status --bare || true"
    mkecho '<<<mknotifyd:sep(0)>>>'
    get_epoch
    for _statefile in /omd/sites/*/var/log/mknotifyd.state; do
        if [ -e "${_statefile}" ]; then
            _site=${_statefile%/var/log*}
            _site=${_site#/omd/sites/}
            mkecho "[${_site}]"
            grep -v '^#' <"${_statefile}"
        fi
        unset -v _site
    done

    mkecho '<<<omd_apache:sep(124)>>>'
    for _statsfile in /omd/sites/*/var/log/apache/stats; do
        if [ -e "${_statsfile}" ]; then
            _site=${_statsfile%/var/log*}
            _site=${_site#/omd/sites/}
            mkecho "[${_site}]"
            cat "${_statsfile}"
            : >"${_statsfile}"
            # prevent next section to fail caused by a missing newline at the end of the statsfile
            mkecho
        fi
        unset -v _site
    done
fi

mkecho '<<<omd_info:sep(59)>>>'
mkecho '[versions]'
mkecho 'version;number;edition;demo'
for _versiondir in /omd/versions/*; do
    _omd_version=${_versiondir#/omd/versions/}

    # filter out special directory 'default'
    [ "${_omd_version}" = "default" ] && continue

    _omd_number="${_omd_version}"
    _omd_demo="0"
    case "${_omd_version}" in
        (*.demo)
            _omd_number=${_omd_version%.demo}
            _omd_demo="1"
        ;;
    esac
    _omd_edition=${_omd_number##*.}
    _omd_number=${_omd_number%.*}
    mkecho "${_omd_version};${_omd_number};${_omd_edition};${_omd_demo}"
done
mkecho '[sites]'
mkecho 'site;used_version;autostart'
for _sitedir in /omd/sites/*; do
    _site=${_sitedir#/omd/sites/}
    _used_version=$(readlink "${_sitedir}"/version)
    _used_version=${_used_version##*/}
    _autostart="0"
    if grepq "CONFIG_AUTOSTART[[:blank:]]*=[[:blank:]]*'on'" "${_sitedir}"/etc/omd/site.conf; then
        _autostart="1"
    fi
    mkecho "${_site};${_used_version};${_autostart}"
done

# Get stats about OMD monitoring cores running on this machine.
# Since cd is a shell builtin the check does not affect the performance
# on non-OMD machines.
if cd /omd/sites; then
    mkecho '<<<livestatus_status:sep(59)>>>'
    for _site in *; do
        if [ -S "/omd/sites/${_site}/tmp/run/live" ]; then
            mkecho "[${_site}]"
            # shellcheck disable=SC2039
            mkecho -e "GET status" |
                waitmax 3 "/omd/sites/${_site}/bin/unixcat" "/omd/sites/${_site}/tmp/run/live"
        fi
    done

    mkecho '<<<livestatus_ssl_certs:sep(124)>>>'
    for _site in *; do
        mkecho "[${_site}]"
        for _pem_path in "/omd/sites/${_site}/etc/ssl/ca.pem" "/omd/sites/${_site}/etc/ssl/sites/${_site}.pem"; do
            if [ -f "${_pem_path}" ]; then
                _cert_date=$(
                    openssl x509 -enddate -noout -in "${_pem_path}" | 
                        sed -e "s/^notAfter=//" -e "s/GMT//" | 
                        awk '{printf("%s %02d %d %s\n", $1,$2,$4,$3)}'
                )
                # TO-DO: Confirm that this works
                mkecho "${_pem_path}|$(calculate_cert_epoch "${_cert_date}")"
            fi
        done
    done

    mkecho '<<<mkeventd_status:sep(0)>>>'
    for _site in *; do
        if [ -S "/omd/sites/${_site}/tmp/run/mkeventd/status" ]; then
            mkecho "[\"${_site}\"]"
            # shellcheck disable=SC2039
            mkecho -e "GET status\\nOutputFormat: json" |
                waitmax 3 "/omd/sites/${_site}/bin/unixcat" "/omd/sites/${_site}/tmp/run/mkeventd/status"
        fi
    done
fi